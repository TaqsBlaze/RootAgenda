// @ts-nocheck
document.addEventListener("DOMContentLoaded",(()=>{document.getElementById("currentYear").textContent=(new Date).getFullYear();const e=document.getElementById("generateAgendaBtn"),t=document.getElementById("meetingTopic"),n=document.getElementById("desiredOutcomes"),a=document.getElementById("generatedAgenda"),s=document.getElementById("summarizeNotesBtn"),i=document.getElementById("meetingNotes"),o=document.getElementById("generatedSummary"),r=document.getElementById("tabAgendaBtn"),c=document.getElementById("tabSummaryBtn"),d=document.getElementById("tabAgenda"),l=document.getElementById("tabSummary"),m="https://api.mafaro.co.zw/rootagenda";window.openTab=e=>{r.classList.remove("active"),c.classList.remove("active"),d.classList.remove("active"),l.classList.remove("active"),"agenda"===e?(r.classList.add("active"),d.classList.add("active")):"summary"===e&&(c.classList.add("active"),l.classList.add("active"))},openTab("agenda"),e.addEventListener("click",(async()=>{const e=t.value.trim(),s=n.value.trim();if(e&&s){a.innerHTML='<p class="text-indigo-300 animate-pulse">Generating agenda...</p>';try{let t=[];const n=`Generate a short and precise meeting agenda for the topic: "${e}". Desired outcomes: "${s}". Include standard sections like Introduction, Review of Previous Action Items, Discussion for each outcome, Action Items & Next Steps, Q&A, and Wrap-up. Estimate realistic time allocations for each section. Format as a clean, structured ordered list as html.`;t.push({role:"user",parts:[{text:n}]});const i={contents:t},o=await fetch(m,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)}),r=await o.json();if(r.candidates&&r.candidates.length>0&&r.candidates[0].content&&r.candidates[0].content.parts&&r.candidates[0].content.parts.length>0){let t=r.candidates[0].content.parts[0].text;t=t.replace(/```html\n|\n```/g,"").trim(),t.includes("<ol>")||t.includes("<ul>")||(t=t.split("\n").filter((e=>""!==e.trim())).map((e=>e.match(/^\s*(\d+\.|\-|\*)\s/)?`<li>${e.replace(/^\s*(\d+\.|\-|\*)\s*/,"")}</li>`:`<p>${e}</p>`)).join(""),t.includes("<li>")&&(t=`<ol class="list-decimal list-inside space-y-2">${t}</ol>`));let n=`\n                    <h4 class="text-2xl font-semibold mb-3">Meeting Agenda: ${e}</h4>\n                    <p class="text-sm text-gray-400 mb-4">Date: ${(new Date).toLocaleDateString()}</p>\n                    ${t}\n                    <p class="mt-6 text-xs text-gray-500 text-right">Generated by RootAgenda AI</p>\n                `;a.innerHTML=n}else a.innerHTML='<p class="text-red-400">Failed to generate agenda. Please try again.</p>'}catch(e){console.error("Error generating agenda:",e),a.innerHTML='<p class="text-red-400">An error occurred while generating the agenda. Please try again.</p>'}}else a.innerHTML='<p class="text-red-400">Please enter a meeting topic and desired outcomes.</p>'})),s.addEventListener("click",(async()=>{const e=i.value.trim();if(e){o.innerHTML='<p class="text-indigo-300 animate-pulse">Summarizing notes...</p>';try{let t=[];const n=`Please summarize the following meeting notes concisely, extracting key decisions, action items, and important discussion points. Provide the summary as a list of bullet points in html format dont use markdown.\n\nMeeting Notes:\n${e}`;t.push({role:"user",parts:[{text:n}]});const a={contents:t};console.log("Sending request to LLM API:",m,a);const s=await fetch(m,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}),i=await s.json();if(i.candidates&&i.candidates.length>0&&i.candidates[0].content&&i.candidates[0].content.parts&&i.candidates[0].content.parts.length>0){let e=i.candidates[0].content.parts[0].text;e=e.replace(/```html\n|\n```/g,"").trim(),e.includes("<ul")||e.includes("<ol>")||(e=e.split("\n").filter((e=>""!==e.trim())).map((e=>e.match(/^\s*(\-|\*)\s/)?`<li>${e.replace(/^\s*(\-|\*)\s*/,"")}</li>`:`<p>${e}</p>`)).join(""),e.includes("<li>")&&(e=`<ul class="list-disc list-inside space-y-1">${e}</ul>`));let t=`\n                    <h4 class="text-2xl font-semibold mb-3">Meeting Summary:</h4>\n                    ${e}\n                    <p class="mt-6 text-xs text-gray-500 text-right">Generated by RootAgenda AI</p>\n                `;o.innerHTML=t}else o.innerHTML='<p class="text-red-400">Failed to summarize notes. Please try again.</p>'}catch(e){console.error("Error summarizing notes:",e),o.innerHTML='<p class="text-red-400">An error occurred while summarizing notes. Please try again.</p><p class="text-red-400">Error details: '+e.message+"</p>"}}else o.innerHTML='<p class="text-red-400">Please paste some meeting notes to summarize.</p>'}))}));